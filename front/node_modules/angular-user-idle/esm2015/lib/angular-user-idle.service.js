/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, NgZone } from '@angular/core';
import { Subject, merge, fromEvent, from, interval, timer, of } from 'rxjs';
import { bufferTime, distinctUntilChanged, filter, finalize, map, scan, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { UserIdleConfig } from './angular-user-idle.config';
import * as i0 from "@angular/core";
import * as i1 from "./angular-user-idle.config";
/**
 * User's idle service.
 */
export class UserIdleService {
    /**
     * @param {?} config
     * @param {?} _ngZone
     */
    constructor(config, _ngZone) {
        this._ngZone = _ngZone;
        this.timerStart$ = new Subject();
        this.timeout$ = new Subject();
        /**
         * Idle value in seconds.
         * Default equals to 10 minutes.
         */
        this.idle = 600;
        /**
         * Timeout value in seconds.
         * Default equals to 5 minutes.
         */
        this.timeout = 300;
        /**
         * Ping value in seconds.
         * * Default equals to 2 minutes.
         */
        this.ping = 120;
        if (config) {
            this.idle = config.idle;
            this.timeout = config.timeout;
            this.ping = config.ping;
        }
    }
    /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    startWatching() {
        if (!this.activityEvents$) {
            this.activityEvents$ = merge(fromEvent(window, 'mousemove'), fromEvent(window, 'resize'), fromEvent(document, 'keydown'));
        }
        this.idle$ = from(this.activityEvents$);
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        // If any of user events is not active for idle-seconds when start timer.
        this.idleSubscription = this.idle$
            .pipe(bufferTime(500), // Starting point of detecting of user's inactivity
        filter(arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer), tap(() => (this.isIdleDetected = true)), switchMap(() => this._ngZone.runOutsideAngular(() => interval(1000).pipe(takeUntil(merge(this.activityEvents$, timer(this.idle * 1000).pipe(tap(() => {
            this.isInactivityTimer = true;
            this.timerStart$.next(true);
        })))), finalize(() => (this.isIdleDetected = false))))))
            .subscribe();
        this.setupTimer(this.timeout);
        this.setupPing(this.ping);
    }
    /**
     * @return {?}
     */
    stopWatching() {
        this.stopTimer();
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    stopTimer() {
        this.isInactivityTimer = false;
        this.timerStart$.next(false);
    }
    /**
     * @return {?}
     */
    resetTimer() {
        this.stopTimer();
        this.isTimeout = false;
    }
    /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    onTimerStart() {
        return this.timerStart$.pipe(distinctUntilChanged(), switchMap(start => (start ? this.timer$ : of(null))));
    }
    /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    onTimeout() {
        return this.timeout$.pipe(filter(timeout => !!timeout), tap(() => (this.isTimeout = true)), map(() => true));
    }
    /**
     * @return {?}
     */
    getConfigValue() {
        return {
            idle: this.idle,
            timeout: this.timeout,
            ping: this.ping
        };
    }
    /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    setConfigValues(config) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set config values');
            return;
        }
        if (config.idle) {
            this.idle = config.idle;
        }
        if (config.ping) {
            this.ping = config.ping;
        }
        if (config.timeout) {
            this.timeout = config.timeout;
        }
    }
    /**
     * Set custom activity events
     *
     * @param {?} customEvents Example: merge(
     *   fromEvent(window, 'mousemove'),
     *   fromEvent(window, 'resize'),
     *   fromEvent(document, 'keydown'),
     *   fromEvent(document, 'touchstart'),
     *   fromEvent(document, 'touchend')
     * )
     * @return {?}
     */
    setCustomActivityEvents(customEvents) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set custom activity events');
            return;
        }
        this.activityEvents$ = customEvents;
    }
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @protected
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    setupTimer(timeout) {
        this._ngZone.runOutsideAngular(() => {
            this.timer$ = interval(1000).pipe(take(timeout), map(() => 1), scan((acc, n) => acc + n), tap(count => {
                if (count === timeout) {
                    this.timeout$.next(true);
                }
            }));
        });
    }
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @protected
     * @param {?} ping
     * @return {?}
     */
    setupPing(ping) {
        this.ping$ = interval(ping * 1000).pipe(filter(() => !this.isTimeout));
    }
}
UserIdleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
UserIdleService.ctorParameters = () => [
    { type: UserIdleConfig, decorators: [{ type: Optional }] },
    { type: NgZone }
];
/** @nocollapse */ UserIdleService.ngInjectableDef = i0.defineInjectable({ factory: function UserIdleService_Factory() { return new UserIdleService(i0.inject(i1.UserIdleConfig, 8), i0.inject(i0.NgZone)); }, token: UserIdleService, providedIn: "root" });
if (false) {
    /** @type {?} */
    UserIdleService.prototype.ping$;
    /**
     * Events that can interrupts user's inactivity timer.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.activityEvents$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timerStart$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timeout$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idle$;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timer$;
    /**
     * Idle value in seconds.
     * Default equals to 10 minutes.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idle;
    /**
     * Timeout value in seconds.
     * Default equals to 5 minutes.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.timeout;
    /**
     * Ping value in seconds.
     * * Default equals to 2 minutes.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.ping;
    /**
     * Timeout status.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.isTimeout;
    /**
     * Timer of user's inactivity is in progress.
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.isInactivityTimer;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.isIdleDetected;
    /**
     * @type {?}
     * @protected
     */
    UserIdleService.prototype.idleSubscription;
    /**
     * @type {?}
     * @private
     */
    UserIdleService.prototype._ngZone;
}
//# sourceMappingURL=data:application/json;base64,